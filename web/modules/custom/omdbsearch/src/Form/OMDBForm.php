<?php

namespace Drupal\omdbsearch\Form;

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use GuzzleHttp\Client as GuzzleClient;
use GuzzleHttp\Psr7\Request as GuzzleRequest;
use Drupal\Common;

/**
 * Our simple form class.
 */
class OMDBForm extends FormBase
{

  /**
   * {@inheritdoc}
   */
  public function getFormId()
  {
    return 'omdb_search_form';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state)
  {

    $form['movie_title'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Movie title'),
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Search'),
    ];

    //-----------------------------

    $form['message'] = array(
      '#markup' => $this->t('List of movies found.'),
    );

    $headers = array(
      t('Poster'),
      t('Title'),
      t('Year'),
      t('Add to favorites'),
    );

    $form['results_table'] = array(
      '#type' => 'table',
      '#header' => $headers,
      '#empty' => t('No entries available.'),
    );

    $movie_title = \Drupal::request()->query->get('movie_title');
    if ($movie_title)
      try {
//        $client = new GuzzleClient();
//        $request = new GuzzleRequest("GET", "http://www.omdbapi.com/?apikey=d1d8751d&s={$movie_title}");
//        $response = $client->send($request, ['timeout' => 30]);
//        $searchResult = json_decode($response->getBody(), true);

        /** @var \Drupal\omdbsearch\OMDBAPIService $searchResult */
        $omdbSearchAPI = \Drupal::service('omdbsearch.moviesearch');
        $searchResult = $omdbSearchAPI->queryEndpoint(['s' => $movie_title]);

        if (!empty($searchResult['Search']) && count($searchResult['Search']) > 0) {

          foreach ($searchResult['Search'] as $key => $value) {

            $form['results_table'][$key]['col_poster'] = array(
              '#type' => 'html_tag',
              '#tag' => 'img',
              '#attributes' => array(
                'width' => 150,
                'src' => $value['Poster']
              ),
            );

            $form['results_table'][$key]['col_title'] = [
              '#plain_text' => $value['Title'],
            ];

            $form['results_table'][$key]['col_year'] = [
              '#plain_text' => $value['Year']
            ];

            $form['results_table'][$key]["save_movie_{$key}"] = [
              '#type' => 'link',
              '#title' => "Save",
              '#url' => Url::fromRoute('omdbsearch.add_movie_form', ['imdbId' => $value['imdbID']]),
            ];

            $form['results_table'][$key]["save_movie_{$key}"]['movie_poster'] = [
              '#type' => 'hidden',
              '#value' => $value['Title'],
            ];

            $form['results_table'][$key]["save_movie_{$key}"]['movie_title'] = [
              '#type' => 'hidden',
              '#value' => $value['Title'],
            ];

            $form['results_table'][$key]["save_movie_{$key}"]['movie_year'] = [
              '#type' => 'hidden',
              '#value' => $value['Year'],
            ];

            $form['results_table'][$key]["save_movie_{$key}"]['movie_rating'] = [
              '#type' => 'hidden',
              '#value' => 0,
            ];
          }


        } else {

        }

      } catch (\Exception $e) {
        watchdog_exception('omdb', $e);
        return (object)[
          'response_type' => '',
          'response_data' => [],
          'pagination' => (object)[
            'total_count' => 0,
            'current_limit' => 0,
            'current_offset' => 0,
          ],
        ];
      }


    //----------------------------------
    // Don't cache this page.
    // $content['#cache']['max-age'] = 0;

    $form['pager'] = array
    (
      '#theme' => 'pager',
    );


    //-----------------------------


//    // $selected_value will only have a value after submit (see submit function)
//    if ($selected_value) {
//      // not shown - use $selected_value to do whatever it was you were
//      // previously doing in your submit function
//      $per_page = 10;
//      $current_page = pager_default_initialize(count($rows), $per_page);
//      // split array into page sized chunks
//      $chunks = array_chunk($rows, $per_page, TRUE);
//      $form['results_table'] = array(
//        '#theme' => 'table',
//        '#header' => $header,
//        '#rows' => $chunks[$current_page],
//      );
//      $form['pager'] = array
//      (
//        '#theme' => 'pager',
//      );
//    }


    return $form;
  }
//
//  /**
//   * {@inheritdoc}
//   */
  /*public function validateForm(array &$form, FormStateInterface $form_state)
  {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }*/

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    // drupal_set_message($form_state->getValue('movie_title'));
//    var_dump($form_state->getValue('results_table'));
//    die();

//    $this->messenger()->addStatus($form_state->getValue('submit'));
//
//    $this->messenger()->addStatus($form_state->getValue('results_table'));

    if (!empty($form_state->getValue('movie_title'))) {
      $form_state->setRedirect('omdbsearch.omdb_search', ['movie_title' => $form_state->getValue('movie_title')]);
    }
  }

  /**
   * {@inheritdoc}
   */
  public function submit_favorite_movie_submit(array &$form, FormStateInterface $form_state)
  {
    // drupal_set_message($form_state->getValue('movie_title'));

    $this->messenger()->addStatus('test');

  }

}
